<template>
	<view class="video" style="margin-top: 120rpx;">
		<video  :src="src" :controls="true" :show-play-btn="false" :muted="!load||!play"
			:style="{height: vi-heightss-60 +'px'}" :loop="true" @play="continuePlay" :autoplay="true"
			:enable-progress-gesture="false" :objectFit="objectFit" @ended="playEnd" :initial-time="startTime"
			:id="`video_${src}`" ref="`video_${src}`" class="video" @timeupdate="timeupdate" show-play-btn enable-progress-gesture>
		</video>
	
		<cover-view class="icon-view" v-if="!play&&!playFirst"><text class="icon" style="color:#FFF">&#xe896;</text></cover-view>
		<cover-image class="img" :style="{height: window-heightss*5 +'px' }" :src="poster" v-if="poster!=''&&playFirst"></cover-image>
		<cover-view class="top"></cover-view> 
		<cover-view class="bottom"></cover-view>
		<!-- #ifdef APP-PLUS -->
		<cover-view class="danmu-view">
			<chunLei-danmu :danmuList="danmuList" :width="750"  :current="time" ref="danmu"></chunLei-danmu>
		</cover-view>
		<!-- #endif -->
		<!-- #ifndef MP-WEIXIN -->
		<!--<cover-view class="slider-view" >
			<chunLei-slider :max="duration" :value="time" :style="{width:`${380}px`}" :screenLeft="120" :width="380" @change="changeCurrent"></chunLei-slider>
		</cover-view>
		 -->
		<!--
		<cover-view class="slider-viewa" style="margin-top: 0upx;">
		<cover-view style="font-size: 15upx;color: #FFFFFF;top: 50upx;height: 80upx;">{{time}}秒</cover-view>
		</cover-view>
		
		<cover-view class="slider-viewb" style="margin-top: 0upx;">
		<cover-view style="font-size: 15upx;color: #FFFFFF;top: 50upx;height: 80upx;">{{timej(alltime/60)}}</cover-view>
		</cover-view>
		-->
		
		
		<cover-image :src="rotateImg" class="rotate-img" :style="{transform:`rotate(${time*20}deg)`}"></cover-image>
		<!-- #endif -->
		<!-- #ifdef MP-WEIXIN -->
		<cover-view class="progressBar" :style="{ width: barWidth }"></cover-view>
		<!-- #endif -->
	</view>
</template>

<script>
	
	import chunLeiSlider from './chunLei-slider/chunLei-slider.nvue';
	//#ifdef APP-NVUE
	import chunLeiDanmu from './chunLei-danmu/chunLei-danmu.nvue';
	//#endif
	export default{ 
		components:{
			chunLeiSlider,
			//#ifdef APP-NVUE
			chunLeiDanmu
			//#endif
		},
		props:{
			controls:{
				type:Boolean,
				default:false
			},
			src:{
				type:String,
				default:''
			},
			rotateImg:{
				type:String,
				default:''
			},
			play:{
				type:Boolean,
				default:false
			},
			height:{
				type:String,
				default:''
			},
			width:{
				type:String,
				default:''
			},
			initialTime:{
				type:Number,
				default:0
			},
			gDuration:{
				type:Number,
				default:999
			}, //大概时长使进度条更准确
			objectFit:{
				type:String,
				default:'contain'
			},
			poster:{ //视频封面的图片
				type:String,
				default:''
			},
			danmuList:{
				type:Array,
				default:[]
			}
		},
		data(){
			return{
				vi:uni.getSystemInfoSync().screenHeight,
				window:uni.getSystemInfoSync().windowHeight,
				heightss:uni.getSystemInfoSync().statusBarHeight,
				minutes:0,
				seconds:0,
				time:0,
				alltime:0,
				duration:0,
				playFirst:true,
				load:false,
				timer:null
			}
		},
		beforeCreate() {
			// #ifdef APP-NVUE
			var domModule = weex.requireModule('dom');
			domModule.addRule('fontFace', {
				'fontFamily': "texticons",
				'src': "url('//static/chunlei-video/text-icon.ttf')"
			});
			// #endif
		},
		mounted() {
			this.videoCtx = uni.createVideoContext(`video_${this.src}`,this)
		},
		onLoad(){
			
			this.minutes = parseInt((this.time % (1000 * 60 * 60)) / (1000 * 60));
			this.seconds = Math.floor((this.time % (1000 * 60)) / 1000);

		},
		methods:{
			
			timej(value) {
			let realVal = parseFloat(value).toFixed(1)
			return realVal
			},
			timea(value) {
			let realVal = parseFloat(value).toFixed(0)
			return realVal
			},
			videoTimeUpdateEvent(e) { // 播放进度改变
			    this.playTime=e.detail.currentTime
			    
			     console.log('视频播放时长', this.playTime,'视频总时长', this.allTime)
			 },
			continuePlay(){
				if(!this.load){
					setTimeout(()=>{
						this.load = true
						if(this.timer) clearTimeout(this.timer)
						this.timer = setTimeout(()=>{
							if(this.play){
								this.videoCtx.play();
								this.playFirst = false
								
							}else{
								this.videoCtx.pause(); 
								
							}
						},300)
					},1000)
					
				}
			},
			playVedio(){
			  this.videoContext = uni.createVideoContext('video_play');
			   this.videoContext.requestFullScreen();
			},
			
			//拖动滑块
			changeCurrent(e){
				this.time = e.detail.value
				this.videoCtx.seek(this.time)
				let timee = parseFloat(this.time).toFixed(0)
				let ttime = parseInt((timee /60));
				this.showToast(ttime ==0?timee+'秒':ttime!=0?ttime+'分钟':'');
				this.videoCtx.requestFullScreen();
			},
			playEnd(){
				this.$emit('playEnd')
			},
			timeupdate(event){
				this.alltime=event.detail.duration
				this.duration = event.detail.duration
				if(this.time>=event.detail.duration) this.time=0
				this.time = event.detail.currentTime
				this.$emit('timeupdate',this.time)
			},
			videoPlay:function(){
				if(this.timer) clearTimeout(this.timer)
				this.timer = setTimeout(()=>{
					if(this.play){
						this.videoCtx.play();
						this.playFirst = false
					}else{
						this.videoCtx.pause();
						this.$emit('pause',this.time)
					}
				},300)
				
			},
		},
		watch:{
			//防抖 防止视频播放暂停太快
			play: function (newVal,oldVal){
				if(this.load) this.videoPlay()
			},
			startTime:{
				immediate: true,
				handler(newVal,oldVal){
					
					this.time = newVal
				}
			},
			gDuration:{
				immediate: true,
				handler(newVal,oldVal){
					
					this.duration = newVal
				}
			}
		},
		computed:{
			barWidth(){
				let width = this.time/this.duration*parseInt(this.width)
				return `${width}px`
			},
			startTime(){
				return this.initialTime
			}
		}
	}
</script>

<style scoped>
	/* #ifndef APP-PLUS-NVUE */
	@font-face {
		font-family: "texticons";
		src: url('~@/static/chunlei-video/text-icon.ttf') format('truetype');
	}
	/* #endif*/
	.video{
		/* #ifndef APP-NVUE */
		display: flex;
		/* #endif */
		width: 750rpx;
		
		justify-content: center;
		align-items: center;
	}
	.img{
		position: absolute;
		
		width: 750rpx;
	}
	.icon-view{
		position: absolute;
	}
	.top{
		position: absolute;
		top:0;
		background-image: linear-gradient(to top , rgba(0,0,0,0) , rgba(2,0,0,0.7));
		width: 750rpx;
		height: 300rpx;
	}
	.icon{
		opacity: 0.6;
		font-size: 42px;
		color: #fff;
		/* #ifndef APP-PLUS-NVUE */
		font-family: "texticons";
		/* #endif*/
		font-family: texticons;
	}
	.bottom{
		position: absolute;
		bottom: 0;
		background-image: linear-gradient(to top , rgba(0,0,0,0.7) , rgba(0,0,0,0));
		width: 750rpx;
		height: 300rpx;
	}
	.slider-view{
		position: absolute;
		left: -10px;
		width: 750upx;
		bottom: 5px; 
		z-index:1;
	}
	.slider-viewa{
		position: absolute;
		left: 10px; 
		width: 750upx;
		bottom: 10px;
		z-index:66888;
	}
	.slider-viewb{
		position: absolute;
		left: 0;
		bottom:30px;
		z-index:66688;
	}
	.progressBar{
		border-radius: 2upx;
		height: 4upx;
		background-color: #FFFFFF;
		z-index: 999999;
		position: absolute;
		left: 0;
		bottom: 30px;
		//#ifndef APP-PLUS-NVUE
		animation: flicker 4s linear infinite;
		animation-direction:alternate;
		//#endif
	}
	//#ifndef APP-PLUS-NVUE
	@keyframes flicker {
		0% { box-shadow:0 0 0 #FFFFFF; }
	     /** 暂停效果 */
		10% { box-shadow:0 0 2upx #FFFFFF; }
	    50% { box-shadow:0 0 10upx #FFFFFF; }
	    60% { box-shadow:0 0 12upx #FFFFFF; }
	    90% { box-shadow:0 0 18upx #FFFFFF; }
	    100% { box-shadow:0 0 20upx #FFFFFF; }
	
	}
	//#endif
	.danmu-view{
		position: absolute;
		top:0;
		height: 160px;
	}
	.rotate-img{
		width: 90rpx;
		height: 90rpx;
		position: absolute;
		bottom: 100rpx;
		right: 20rpx;
		border-radius: 45rpx;
	}
</style>